/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package encryptedchat;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectOutputStream;
import java.io.OutputStreamWriter;
import static java.lang.System.exit;
import java.net.Socket;
import java.security.InvalidKeyException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.util.Base64;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;

/**
 *
 * @author Alois
 */
public class ClientWindow extends javax.swing.JFrame {

    /**
     * Creates new form ClientWindow
     */
    private static Socket socket;
    private static BufferedWriter writer;
    private static BufferedReader reader;

    public ClientWindow() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ClientLlb = new javax.swing.JLabel();
        sendBtn = new javax.swing.JButton();
        clientMsgTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        clientTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ClientLlb.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        ClientLlb.setText("Client");

        sendBtn.setText("Send");
        sendBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendBtnActionPerformed(evt);
            }
        });

        clientMsgTextField.setText("Type in your message..");
        clientMsgTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clientMsgTextFieldActionPerformed(evt);
            }
        });

        clientTextArea.setColumns(20);
        clientTextArea.setRows(5);
        jScrollPane1.setViewportView(clientTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(134, 134, 134)
                        .addComponent(ClientLlb, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(clientMsgTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(sendBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(54, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ClientLlb, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(sendBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(clientMsgTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void clientMsgTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clientMsgTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_clientMsgTextFieldActionPerformed

    private void sendBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendBtnActionPerformed
        try {
            // TODO add your handling code here:
            String messageToSend = "";
            messageToSend = clientMsgTextField.getText();
            writer.write((messageToSend));
            writer.newLine();
            writer.flush();
            clientMsgTextField.setText("");
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_sendBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientWindow().setVisible(true);
            }
        });
        try {
            Socket socket = new Socket("localhost", 4646);
            System.out.println("Connected to server.");

            reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            writer = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));
            new Thread(new ServerHandler(socket)).start();
            
            new Thread(new Runnable() {
                @Override
                public void run() {
                    String msgFromGroupChat;
                    while (socket.isConnected()) {
                        try {
                            String messageToTextArea = "";
                            messageToTextArea = reader.readLine();
                            clientTextArea.setText(messageToTextArea);
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                }
            }).start();
            
        } catch (IOException e) {
            e.printStackTrace();
        }
        /* Create and display the form */
       
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ClientLlb;
    private javax.swing.JTextField clientMsgTextField;
    private static javax.swing.JTextArea clientTextArea;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton sendBtn;
    // End of variables declaration//GEN-END:variables
}

class ClientReceiver implements Runnable {

    private static PrivateKey privateKey;
    private static PublicKey publicKey;

    private Socket socket;
    private BufferedReader reader;
    private ObjectOutputStream objectOutputStream;

    private SecretKey aesKey;
    private BufferedWriter writer;

    public ClientReceiver(Socket socket) {
        this.socket = socket;
        try {
            reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            writer = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));

            objectOutputStream = new ObjectOutputStream(socket.getOutputStream());//to send

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void run() {
        RSAKeyGenerator();
        SendPublicKey(publicKey);
        DecryptedAESKey();
        listenForMessage();

        //Scanner scanner = new Scanner(System.in);
        //System.out.println("This is an end-to-end ecypted chat. \nPlease enter your name:");
        //String clientName= scanner.nextLine();
        //System.out.println("Type your message...");
        String message;
        while (socket.isConnected()) {
            try {
                message = messageFromTextField();
                writer.write(EncryptMessage(message));
                writer.newLine();
                writer.flush();
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }

    public String messageFromTextField() {
        String message = "";
        try {
            message = reader.readLine();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        return message;
    }

    public void messageToTextArea(String message) {
        try {
            writer.write(message);
            writer.newLine();
            writer.flush();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    public void listenForMessage() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                String msgFromGroupChat;
                while (socket.isConnected()) {
                    try {
                        msgFromGroupChat = reader.readLine();
                        messageToTextArea(DecryptMessage(msgFromGroupChat));
                    } catch (IOException e) {
                        closeEverything(socket, reader, writer);

                    }
                }
            }
        }).start();

    }

    public static void RSAKeyGenerator() {
        KeyPair keyPair = null;
        try {
            KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance("RSA");
            keyPairGen.initialize(2048);
            keyPair = keyPairGen.generateKeyPair();
            publicKey = keyPair.getPublic();
            //System.out.println("publicKey----->" + publicKey);
            privateKey = keyPair.getPrivate();
            //System.out.println("privateKey----->" + privateKey);
        } catch (NoSuchAlgorithmException ex) {
            ex.printStackTrace();
        }
    }

    public void SendPublicKey(PublicKey publicKey) {
        try {
            objectOutputStream.writeObject(publicKey);
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    public byte[] receivedEncryptedAESKey() {
        //String  encryptedAESKeyString;
        try {

            String encryptedAESKeyString = reader.readLine();
            byte[] encryptedAESKeyBytes = Base64.getDecoder().decode(encryptedAESKeyString);
            //System.out.println("encryptedAESKeyBytes----->" + Arrays.toString(encryptedAESKeyBytes));
            //System.out.println("encryptedAESKeyBytes----->" + (encryptedAESKeyString));
            return encryptedAESKeyBytes;
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        return null;
    }

    public void DecryptedAESKey() {

        try {

            byte[] receivedEncryptedAESKey = receivedEncryptedAESKey();

            Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
            cipher.init(Cipher.DECRYPT_MODE, privateKey);

            byte[] decryptedAESKeyBytes = cipher.doFinal(receivedEncryptedAESKey);

            aesKey = new SecretKeySpec(decryptedAESKeyBytes, "AES");
            //System.out.println("encryptedAESKeyBytes----->" + (aesKey));

        } catch (NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException | IllegalBlockSizeException | BadPaddingException ex) {
            ex.printStackTrace();
        }

    }

    public String EncryptMessage(String message) {
        String encryptedMessage = null;
        try {
            Cipher cipher = Cipher.getInstance("AES");
            cipher.init(Cipher.ENCRYPT_MODE, aesKey);
            byte[] encryptedBytes = cipher.doFinal(message.getBytes());
            encryptedMessage = Base64.getEncoder().encodeToString(encryptedBytes);

        } catch (InvalidKeyException | NoSuchAlgorithmException | NoSuchPaddingException | IllegalBlockSizeException | BadPaddingException ex) {
            ex.printStackTrace();
        }
        return encryptedMessage;
    }

    public String DecryptMessage(String message) {
        String decryptedMessage = null;
        try {
            Cipher cipher = Cipher.getInstance("AES");
            cipher.init(Cipher.DECRYPT_MODE, aesKey);
            byte[] decryptedBytes = cipher.doFinal(Base64.getDecoder().decode(message));
            decryptedMessage = new String(decryptedBytes);

        } catch (IllegalBlockSizeException | BadPaddingException | InvalidKeyException | NoSuchAlgorithmException | NoSuchPaddingException ex) {
            ex.printStackTrace();
        }
        return decryptedMessage;
    }

    private void closeEverything(Socket socket, BufferedReader reader, BufferedWriter bwriter) {
        try {
            // Close resources (socket, reader, writer)
            if (reader != null) {
                reader.close();
            }
            if (bwriter != null) {
                bwriter.close();
            }
            if (socket != null) {
                socket.close();
            }
            exit(0);
        } catch (IOException e) {
            e.printStackTrace(); // Print the stack trace if an IO exception occurs while closing resources
        }
    }
}
